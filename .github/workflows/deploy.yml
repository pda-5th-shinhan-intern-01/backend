name: Deploy Backend

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  build-and-deploy:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Spring Boot project
        run: ./gradlew bootJar

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t kimdongjae/hotsignal-backend-api:latest .

      - name: Push Docker image
        run: docker push kimdongjae/hotsignal-backend-api:latest

      - name: Deploy to backend server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST_BACKEND }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.SSH_PROXY_HOST }}
          proxy_username: ${{ secrets.SSH_PROXY_USER }}
          proxy_key: ${{ secrets.SSH_PROXY_KEY }}
          script: |
            echo "üîç Checking for container using port 8080..."
            CONTAINER_ID=$(docker ps -q --filter "publish=8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "üõë Stopping container on 8080: $CONTAINER_ID"
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
            fi

            echo "üßπ Cleaning up old container name if still reserved..."
            docker rm -f hotsignal-backend-api || true

            echo "üì¶ Pulling latest image..."
            docker pull kimdongjae/hotsignal-backend-api:latest

            echo "üöÄ Running new container..."
            docker run -d --network host -p 8080:8080 \
              --name hotsignal-backend-api \
              -e "SPRING_PROFILES_ACTIVE=prod" \
              -e "SPRING_DATASOURCE_URL=${{secrets.DB_URL}}" \
              -e "SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}" \
              -e "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" \
              kimdongjae/hotsignal-backend-api:latest